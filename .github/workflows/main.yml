name: Deploy to AWS ECS

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 트리거

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Build and push Docker image
        env:
          ECR_REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          docker build -t $ECR_REPOSITORY_URI:$IMAGE_TAG .
          docker push $ECR_REPOSITORY_URI:$IMAGE_TAG

      - name: Generate new task definition
        id: task-def
        env:
          IMAGE_URI: ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
        run: |
          task_definition=$(jq -n \
            --arg IMAGE_URI "$IMAGE_URI" \
            --arg DD_API_KEY "$DD_API_KEY" \
            '{
              family: "jhs-spring-internallb",
              containerDefinitions: [
                {
                  name: "jhs-member-service",
                  image: $IMAGE_URI,
                  essential: true,
                  portMappings: [
                    {
                      containerPort: 8080,
                      hostPort: 8080,
                      protocol: "tcp"
                    }
                  ],
                  environment: [
                    {
                      name: "DB_URL",
                      value: "${{ secrets.DB_URL }}"
                    },
                    {
                      name: "DB_USERNAME",
                      value: "${{ secrets.DB_USERNAME }}"
                    },
                    {
                      name: "DB_PASSWORD",
                      value: "${{ secrets.DB_PASSWORD }}"
                    }
                  ],
                  logConfiguration: {
                    logDriver: "awslogs",
                    options: {
                      "awslogs-group": "/ecs/jhs-spring-internallb",
                      "awslogs-region": "ap-northeast-2",
                      "awslogs-stream-prefix": "ecs"
                    }
                  }
                },
                {
                  name: "datadog-agent",
                  image: "datadog/agent:latest",
                  essential: false,
                  environment: [
                    {
                      name: "DD_API_KEY",
                      value: $DD_API_KEY
                    },
                    {
                      name: "ECS_FARGATE",
                      value: "true"
                    }
                  ],
                  logConfiguration: {
                    logDriver: "awslogs",
                    options: {
                      "awslogs-group": "/ecs/jhs-spring-internallb",
                      "awslogs-region": "ap-northeast-2",
                      "awslogs-stream-prefix": "datadog"
                    }
                  }
                }
              ]
            }')
          echo "$task_definition" > task-definition.json

      - name: Register new task definition in ECS
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://task-definition.json

      - name: Update ECS service with new task definition
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
          ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER_NAME \
            --service $ECS_SERVICE_NAME \
            --force-new-deployment
